-- Authors: C.B. Aberl√©, Wojciech Nawrocki

/- Bidirectional presentation suggested by Corinthia. -/

import GroupoidModel.NaturalModel
import GroupoidModel.TypeTheory.Tarski_SemanticBiDir.Interpretation

mutual
inductive TyExpr where
  | univ
  | el (A : Expr)
  | pi (A B : TyExpr)
  | wk (A : TyExpr) -- HACK: explicit substitutions, but just for weakening
  deriving Repr

inductive Expr where
  /-- A de Bruijn index. -/
  | bvar (n : Nat)
  | app (f a : Expr)
  -- NOTE: no domain type annotation because we only _check_ lambdas.
  -- To synthesize, use `.coe (.lam t) (.pi A B)`.
  -- AFAICT, this unfortunately makes it impossible
  -- to check the domain but synthesize the codomain.
  -- Fortunately we don't care about usability:
  -- expressions are elaborated (with higher-order unification) by Lean,
  -- and typechecking just has to ensure well-typedness in HoTT‚ÇÄ.
  | lam (val : Expr)
  | spi (a b : Expr)
  | coe (t : Expr) (A : TyExpr)
  deriving Repr
end

namespace Notation
declare_syntax_cat judgment
scoped syntax term " ‚ä¢ " judgment : term

scoped syntax term:51 " ‚Üù " term:26 : judgment
scoped syntax term:51 " ‚àã " term " ‚Üù " term:26 : judgment
scoped syntax term:51 " ‚àà " term " ‚Üù " term:26 : judgment

set_option hygiene false in
macro_rules
  | `($Œì ‚ä¢ $T:term ‚Üù $sT:term) => `(InterpType $Œì $T $sT)
  | `($Œì ‚ä¢ $t:term ‚àà $sT:term ‚Üù $st:term) => `(SynthType $Œì $t $sT $st)
  | `($Œì ‚ä¢ $sT:term ‚àã $t:term ‚Üù $st:term) => `(ChkType $Œì $sT $t $st)
end Notation
open Notation

open CategoryTheory NaturalModel Limits

universe u
variable {Ctx : Type u} [SmallCategory Ctx] [HasTerminal Ctx] [M : NaturalModel Ctx]

/-! Typechecking + interpretation relations.
EQ? marks where the typechecker would have to prove an equality to instantiate a premise.
DATA? marks where the typechecker would have to invent some data to instantiate a premise

Also note that we solve premises in the order they appear.

Btw, initially we wrote down
```lean
inductive SynthType : (Œì : CCtx Ctx) ‚Üí Expr ‚Üí (y(Œì) ‚ü∂ M.Ty) ‚Üí (y(Œì) ‚ü∂ M.Tm) ‚Üí Type u
inductive ChkType : (Œì : Ctx) ‚Üí (y(Œì) ‚ü∂ M.Ty) ‚Üí Expr ‚Üí (y(Œì) ‚ü∂ M.Tm) ‚Üí Type u
```
I think this can also work, but it's convenient to use `CCtx.typed`
whose APIs already deal with the various semantic typing obligations. -/
mutual
/-- Type interpretation `Œì ‚ä¢ A ‚Üù sA`
Inputs: `Œì, A`
Outputs: `sA` -/
inductive InterpType : (Œì : CCtx Ctx) ‚Üí TyExpr ‚Üí Œì.ty ‚Üí Type u
  -- Built-in weakening but not any other substitutions ¬Ø\_(„ÉÑ)_/¬Ø
  | wk {Œì A sA sB} :
    Œì ‚ä¢ A ‚Üù sA ‚Üí
    /- Subtlety:
    the typechecker _can_ decompose the input context into `Œì.cons sB`
    because the input is a semantic context _stack_ `CCtx Ctx`.
    It wouldn't work with just a `Ctx`. -/
    Œì.cons sB ‚ä¢ .wk A ‚Üù Œì.wk sB sA
  | univ {Œì} : Œì ‚ä¢ .univ ‚Üù wU
  | pi {Œì} {A B} {sA sB} :
    Œì ‚ä¢ A ‚Üù sA ‚Üí
    Œì.cons sA ‚ä¢ B ‚Üù sB ‚Üí
    Œì ‚ä¢ .pi A B ‚Üù (Œì.mkPi sA sB)
  | el {Œì} {a} {sa} :
    Œì ‚ä¢ wU ‚àã a ‚Üù sa ‚Üí
    Œì ‚ä¢ .el a ‚Üù Œì.mkEl sa

/-- Type synthesis `Œì ‚ä¢ t ‚àà sA ‚Üù st`.
Elimination rules are synthesized.

Inputs: `Œì, t`
Outputs: `sA, st` -/
inductive SynthType : (Œì : CCtx Ctx) ‚Üí Expr ‚Üí (sA : Œì.ty) ‚Üí Œì.typed sA ‚Üí Type u
  | var {Œì : CCtx Ctx} {sA} :
    Œì.cons sA ‚ä¢ .bvar 0 ‚àà (Œì.wk sA sA) ‚Üù (Œì.var‚ÇÄ sA)
  | app {Œì} {f a} {sF sA} {sB : (Œì.cons sA).ty} {sf sa} :
    Œì ‚ä¢ f ‚àà sF ‚Üù sf ‚Üí
    /- DATA?(sA, sB) ; EQ?
    In a complete algorithm,
    we might want to check `sF = Œì.mkPi ?A ?B` here,
    with `?A` and `?B` being metavariables that need unification.
    .. but we cannot decide semantic equality,
    so it seems that synthesis needs to also give us a _syntactic_ type `F`
    for which we'd check `Œì ‚ä¢ F ‚â° .pi ?A ?B`. -/
    (eq_pi : sF = Œì.mkPi sA sB) ‚Üí
    Œì ‚ä¢ sA ‚àã a ‚Üù sa ‚Üí
    Œì ‚ä¢ .app f a ‚àà (Œì.inst sA sB sa) ‚Üù (Œì.mkApp sA sB (eq_pi ‚ñ∏ sf) sa)
  | coe {Œì} {A} {t} {sA} {st} :
    Œì ‚ä¢ A ‚Üù sA ‚Üí
    Œì ‚ä¢ sA ‚àã t ‚Üù st ‚Üí
    Œì ‚ä¢ .coe t A ‚àà sA ‚Üù st

/-- Type checking `Œì ‚ä¢ sA ‚àã t ‚Üù st`
Introduction rules are checked.

Inputs: `Œì, sA, t`
Outputs: `st` -/
inductive ChkType : (Œì : CCtx Ctx) ‚Üí (sA : Œì.ty) ‚Üí Expr ‚Üí Œì.typed sA ‚Üí Type u
  | lam {Œì} {t} {sA sB} {st} :
    Œì.cons sA ‚ä¢ sB ‚àã t ‚Üù st ‚Üí
    Œì ‚ä¢ (Œì.mkPi sA sB) ‚àã .lam t ‚Üù (Œì.mkLam sA sB st)
  | synth {Œì} {t} {sA sA'} {st} :
    Œì ‚ä¢ t ‚àà sA' ‚Üù st ‚Üí
    (eq : sA' = sA) ‚Üí -- EQ?
    Œì ‚ä¢ sA ‚àã t ‚Üù st.cast eq
end

@[app_unexpander InterpType] def interpTypeUnexpander : Lean.PrettyPrinter.Unexpander
  | `($_ $Œì $T $sT) => `($Œì ‚ä¢ $T:term ‚Üù $sT)
  | _ => throw ()

@[app_unexpander SynthType] def synthTypeUnexpander : Lean.PrettyPrinter.Unexpander
  | `($_ $Œì $t $sT $st) => `($Œì ‚ä¢ $t:term ‚àà $sT ‚Üù $st)
  | _ => throw ()

@[app_unexpander ChkType] def chkTypeUnexpander : Lean.PrettyPrinter.Unexpander
  | `($_ $Œì $sT $t $st) => `($Œì ‚ä¢ $sT:term ‚àã $t ‚Üù $st)
  | _ => throw ()

noncomputable section

set_option quotPrecheck false in
notation "‚ãÑ" => CCtx.nil (M := M)

/-! Example typing derivations written out in painful detail
to simulate a typechecking metaprogram. -/

/- Thought:
for completeness of typechecking,
all the equality subgoals ought to apply a sound conversion procedure
rather than `rfl`/`simp`/something that happens to work,
but for that we'd need to synthesize syntactic types.
Equality of semantic types isn't decidable. -/
example
    (sN : ‚ãÑ.ty)
    (z : Expr) (sz : ‚ãÑ.typed sN)
    (z_synth : ‚ãÑ ‚ä¢ z ‚àà sN ‚Üù sz)
    (f : Expr) (sf : ‚ãÑ.typed (‚ãÑ.mkPi sN (‚ãÑ.wk sN sN)))
    (f_synth : ‚ãÑ ‚ä¢ f ‚àà (‚ãÑ.mkPi sN (‚ãÑ.wk sN sN)) ‚Üù sf) :
    Œ£ sa, ‚ãÑ ‚ä¢ sN ‚àã .app f z ‚Üù sa :=
  ‚ü®_,
    .synth
      (.app
        f_synth
        (eq_pi := rfl)
        (.synth
          z_synth
          (eq := rfl)))
      (eq := by simp)‚ü©

-- A dumb lemma we are forced to use because of the indexed inductive.
theorem tri_tri {Œì : CCtx Ctx} (A B : Œì.ty) (eq : A = B) (eq' : B = A)
    (a : Œì.typed A) :
    (eq ‚ñ∏ eq' ‚ñ∏ a) = a :=
  by cases eq; cases eq'; rfl

example
    (N : TyExpr) (sN : ‚ãÑ.ty)
    (N_interp : ‚ãÑ ‚ä¢ N ‚Üù sN)
    (cN : Expr) (scN : ‚ãÑ.typed wU)
    /- With the present rules,
    `(cN_interp : ‚ãÑ ‚ä¢ .el cN ‚Üù sN)` seems not strong enough
    because we don't have a syntactic defeq judgment,
    so cannot conclude
    ```
    Œì ‚ä¢ .el cT ‚Üù sT  Œì ‚ä¢ T ‚â° .el cT  Œì ‚ä¢ T ‚Üù sT
    ---------------------------------------------
    Œì ‚ä¢ T ‚Üù sa
    ``` -/
    (cN_synth : ‚ãÑ ‚ä¢ cN ‚àà wU ‚Üù scN)
    (mkEl_scN : ‚ãÑ.mkEl scN = sN)
    (z : Expr) (sz : ‚ãÑ.typed sN)
    (z_synth : ‚ãÑ ‚ä¢ z ‚àà sN ‚Üù sz)
    (f : Expr) (sf : ‚ãÑ.typed (‚ãÑ.mkPi sN (‚ãÑ.wk sN sN)))
    (f_synth : ‚ãÑ ‚ä¢ f ‚àà (‚ãÑ.mkPi sN (‚ãÑ.wk sN sN)) ‚Üù sf) :
    let f' := .coe f $ .pi (.el $ .app (.coe (.lam $ .bvar 0) (.pi .univ $ .wk .univ)) cN) (.wk N)
    Œ£ sa, ‚ãÑ ‚ä¢ sN ‚àã .app f' z ‚Üù sa :=
  ‚ü®_,
    .synth
      (.app
        (.coe
          (.pi
            (.el
              (.synth
                (.app
                  (.coe
                    (.pi
                      .univ
                      (.wk
                        .univ))
                    (.lam
                      (.synth
                        .var
                        (eq := rfl))))
                  (eq_pi := rfl)
                  (.synth
                    cN_synth
                    (eq := rfl)))
                (eq := by simp)))
            (.wk
              N_interp))
          -- Subtlety: the expected type here is already substantial,
          -- yet the example is trivial.
          -- I worry that checking these indices of the relation
          -- would generate ùí™(a lot) work for the Lean kernel.
          -- Update: in fact, I think that having to generate these terms at all
          -- is a serious performance issue for any kind of certifying typechecker-interpreter.
          -- Given a certified interpreter,
          -- a typechecker-non-interpreter can simply produce `ofTerm (.app f' z) (‚ãØ : ‚ãÑ ‚ä¢ _ : N)`.
          (.synth
            f_synth
            (eq := by
              rw [CCtx.mkApp_mkLam]
              dsimp
              rw [CCtx.inst'_var‚ÇÄ]
              dsimp
              rw [mkEl_scN])))
        -- Have to invent `sA`/`sB` here.
        -- Assuming normalization of the Pi'd types so that `sA`/`sB` come out nice.
        (sA := sN)
        (sB := ‚ãÑ.wk sN sN)
        (eq_pi := by
          -- TODO: We just proved this above. Duplication why?
          rw [CCtx.mkApp_mkLam]
          dsimp
          rw [CCtx.inst'_var‚ÇÄ]
          dsimp
          rw [mkEl_scN])
        (.synth
          z_synth
          (eq := rfl)))
      (eq := by simp)‚ü©
