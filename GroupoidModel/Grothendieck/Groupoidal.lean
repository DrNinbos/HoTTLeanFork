import Mathlib.CategoryTheory.Grothendieck
import Mathlib.CategoryTheory.Category.Grpd
import GroupoidModel.Pointed.IsPullback

import SEq.Tactic.DepRewrite

/-!
# The Groupidal Grothendieck construction

  ‚ÜëGrothendieck (toCat A) -- toPGrpd --> PGrpd
        |                                 |
        |                                 |
‚Üë Grothendieck.forget        PGrpd.forgetToGrpd
        |                                 |
        v                                 v
        ‚ÜëŒì--------------A---------------> Grpd

## Main definitions
* `CategoryTheory.Grothendieck.Groupoidal`
  takes a functor from a groupoid into `Grpd` the category of groupoids,
  composes it with the forgetful functor into `Cat` the category of categories,
  then applies `CategoryTheory.Grothendieck`.
  This is a groupoid.

## Main statements

* `CategoryTheory.Grothendieck.Groupoidal.groupoid`
  is an instance of a groupoid structure on the groupidal
  Grothendieck construction.
* `CategoryTheory.Grothendieck.Groupoidal.isPullback`
  shows that `Grothendieck.forget A` is classified by `PGrpd.forgetToGrpd`
  as the pullback of `A`.
  This uses the proof of the similar fact
  `CategoryTheory.Grothendieck.isPullback`,
  as well as the proof `CategoryTheory.isPullback_forgetToGrpd_forgetToCat`
  that `PGrpd` is the pullback of `PCat`.

- TODO Probably the proof of `Groupoidal.IsPullback` can be shortened
  significantly by providing a direct proof of pullback
  using the `IsMegaPullback` defintions
- NOTE Design: `Groupoidal.Œπ`, `Groupoidal.pre` and so on should *not* be
  reduced by `simp`. Instead we should add `simp` lemmas by hand.
  This avoids `Grpd.forgetToCat` cluttering the user's context
-/

universe v u v‚ÇÅ u‚ÇÅ v‚ÇÇ u‚ÇÇ v‚ÇÉ u‚ÇÉ

namespace CategoryTheory

variable {Œì : Type u} [Category.{v} Œì]
  (A : Œì ‚•§ Grpd.{v‚ÇÅ,u‚ÇÅ})

abbrev Groupoid.compForgetToCat : Œì ‚•§ Cat.{v‚ÇÅ,u‚ÇÅ} := A ‚ãô Grpd.forgetToCat

namespace Grothendieck

/--
  In Mathlib.CategoryTheory.Grothendieck we find the Grothendieck construction
  for the functors `F : C ‚•§ Cat`. Given a functor `F : G ‚•§ Grpd`, we show that
  the Grothendieck construction of the composite `F ‚ãô Grpd.forgetToCat`, where
  `forgetToCat : Grpd ‚•§ Cat` is the embedding of groupoids into categories, is a groupoid.
-/
abbrev Groupoidal {C : Type u‚ÇÅ} [Category.{v‚ÇÅ,u‚ÇÅ} C] (F : C ‚•§ Grpd.{v‚ÇÇ,u‚ÇÇ}) :=
  Grothendieck (Groupoid.compForgetToCat F)

notation:max "‚à´(" A ")" => Grothendieck.Groupoidal A

namespace Groupoidal

section

instance {C : Type u‚ÇÅ} [Category.{v‚ÇÅ,u‚ÇÅ} C] {F : C ‚•§ Grpd.{v‚ÇÇ,u‚ÇÇ}} :
    Category (Groupoidal F) :=
  inferInstanceAs (Category (Grothendieck _))

variable {C : Type u‚ÇÅ} [Groupoid.{v‚ÇÅ,u‚ÇÅ} C] {F : C ‚•§ Grpd.{v‚ÇÇ,u‚ÇÇ}}

instance
    (X : C) : Groupoid (Groupoid.compForgetToCat F |>.obj X) where
  inv f := ((F.obj X).str').inv f

def isoMk {X Y : ‚à´(F)} (f : X ‚ü∂ Y) : X ‚âÖ Y := by
  fapply Grothendieck.mkIso
  ¬∑ exact (Groupoid.isoEquivHom _ _).2 f.base
  ¬∑ apply (Groupoid.isoEquivHom _ _).2 f.fiber

def inv {X Y : ‚à´(F)} (f : X ‚ü∂ Y) : Y ‚ü∂ X  :=
  isoMk f |>.inv

instance groupoid : Groupoid ‚à´(F) where
  inv f :=  inv f
  inv_comp f := (isoMk f).inv_hom_id
  comp_inv f := (isoMk f).hom_inv_id

end

section FunctorFrom

variable {C : Type u} [Category.{v} C]
    (F : C ‚•§ Grpd.{v‚ÇÅ,u‚ÇÅ})

/-- The inclusion of a fiber `F.obj c` of a functor `F : C ‚•§ Cat` into its
groupoidal Grothendieck construction.-/
def Œπ (c : C) : F.obj c ‚•§ Groupoidal F :=
  Grothendieck.Œπ (F ‚ãô Grpd.forgetToCat) c

theorem Œπ_obj (c : C) (d : ‚Üë(F.obj c)) :
    (Œπ F c).obj d = { base := c, fiber := d } :=
  Grothendieck.Œπ_obj _ _ _

theorem Œπ_map (c : C) {X Y : ‚Üë(F.obj c)} (f : X ‚ü∂ Y) :
    (Œπ F c).map f = ‚ü®ùüô _, eqToHom (by simp [Œπ_obj]) ‚â´ f‚ü© :=
  Grothendieck.Œπ_map _ _ _

variable {F}

/-- Every morphism `f : X ‚ü∂ Y` in the base category induces a natural transformation from the fiber
inclusion `Œπ F X` to the composition `F.map f ‚ãô Œπ F Y`. -/
def ŒπNatTrans {X Y : C} (f : X ‚ü∂ Y) : Œπ F X ‚ü∂ F.map f ‚ãô Œπ F Y :=
  Grothendieck.ŒπNatTrans _

end FunctorFrom

section
variable {C : Type u} [Category.{v} C]
    {F G : C ‚•§ Grpd.{v‚ÇÇ,u‚ÇÇ}}
/-- The groupoidal Grothendieck construction is functorial:
a natural transformation `Œ± : F ‚ü∂ G` induces
a functor `Groupoidal.map : Groupoidal F ‚•§ Groupoidal G`.
-/
def map (Œ± : F ‚ü∂ G) : Groupoidal F ‚•§ Groupoidal G :=
  Grothendieck.map (whiskerRight Œ± _)

@[simp] theorem map_obj {Œ± : F ‚ü∂ G} (X : Groupoidal F) :
    (Groupoidal.map Œ±).obj X = ‚ü®X.base, (Œ±.app X.base).obj X.fiber‚ü© := rfl

-- TODO move to ForMathlib
theorem Grothendieck.map_eqToHom_obj_base {F G : C ‚•§ Cat.{v,u}} (h : F = G)
  (x) : ((Grothendieck.map (eqToHom h)).obj x).base = x.base := rfl

theorem map_id_eq : map (ùüô F) = Functor.id (Cat.of <| Groupoidal <| F) :=
  Grothendieck.map_id_eq

end

/-- Applying a functor `G : D ‚•§ C` to the base of the groupoidal Grothendieck
  construction induces a functor
  `Groupoidal (G ‚ãô F) ‚•§ Groupoidal F`. -/
def pre {C : Type u} [Category.{v} C] {D : Type u‚ÇÅ} [Category.{v‚ÇÅ} D]
    (F : D ‚•§ Grpd.{v‚ÇÇ,u‚ÇÇ}) (G : C ‚•§ D) :
    Groupoidal (G ‚ãô F) ‚•§ Groupoidal F :=
  Grothendieck.pre (F ‚ãô Grpd.forgetToCat) G

-- TODO this should be replaced with Groupoidal.pre
def functorial {C D : Grpd.{v‚ÇÅ,u‚ÇÅ}} (F : C ‚ü∂ D) (G : D ‚•§ Grpd.{v‚ÇÇ,u‚ÇÇ}) :
  Grothendieck (Groupoid.compForgetToCat (F ‚ãô G))
  ‚•§ Grothendieck (Groupoid.compForgetToCat G) where
  obj X := ‚ü®F.obj X.base, X.fiber‚ü©
  map {X Y} f := ‚ü®F.map f.base, f.fiber‚ü©
  map_id X := by
    fapply Grothendieck.ext
    ¬∑ exact F.map_id X.base
    ¬∑ simp only [Grothendieck.id_fiber, eqToHom_trans]
  map_comp {X Y Z} f g := by
    simp only [Grothendieck.comp]
    fapply Grothendieck.ext
    ¬∑ exact F.map_comp f.base g.base
    ¬∑ erw [Grothendieck.comp_fiber (F:= Groupoid.compForgetToCat (F ‚ãô G)) f g]
      simp [eqToHom_trans]

instance toPCatObjGroupoid
    (x : Grothendieck (Groupoid.compForgetToCat.{v,u,v‚ÇÅ,u‚ÇÅ} A)) :
    Groupoid x.toPCatObj := by
  dsimp [Grpd.forgetToCat]
  infer_instance

instance toPCatObjPointed (x : Grothendieck (Groupoid.compForgetToCat A)) :
    PointedGroupoid x.toPCatObj :=
  PointedGroupoid.of x.toPCatObj PointedCategory.pt

def toPGrpd : Grothendieck (Groupoid.compForgetToCat A) ‚•§ PGrpd.{v‚ÇÅ,u‚ÇÅ} where
  obj x := PGrpd.of x.toPCatObj
  map := Grothendieck.toPCatMap
  map_id := (Grothendieck.toPCat (Groupoid.compForgetToCat A)).map_id
  map_comp := (Grothendieck.toPCat (Groupoid.compForgetToCat A)).map_comp

theorem toPGrpd_comp_forgetToPCat :
    toPGrpd A ‚ãô PGrpd.forgetToPCat = toPCat (Groupoid.compForgetToCat A) :=
  rfl


section

variable {F : Œì ‚•§ Grpd.{v‚ÇÅ,u‚ÇÅ}}

/-- This proves that base of an eqToHom morphism in the category Grothendieck A is an eqToHom morphism -/
theorem eqToHom_base {x y : Groupoidal F} (eq : x = y) :
    (eqToHom eq).base = eqToHom (by simp [eq]) := by
  cases eq
  simp

/-- This is the proof of equality used in the eqToHom in `Groupoidal.eqToHom_fiber` -/
theorem eqToHom_fiber_aux {g1 g2 : Groupoidal F}
    (eq : g1 = g2) : (F.map (eqToHom eq).base).obj g1.fiber = g2.fiber := by
  cases eq
  simp

/-- This proves that fiber of an eqToHom morphism in the category Grothendieck A is an eqToHom morphism -/
theorem eqToHom_fiber {g1 g2 : Groupoidal F} (eq : g1 = g2) : (eqToHom eq).fiber = eqToHom (eqToHom_fiber_aux eq) := by
  cases eq
  simp

@[ext (iff := false)]
theorem ext {X Y : Groupoidal F} (f g : Hom X Y) (w_base : f.base = g.base)
    (w_fiber : eqToHom (by rw [w_base]) ‚â´ f.fiber = g.fiber) : f = g :=
  Grothendieck.ext f g w_base w_fiber

@[simp] theorem ŒπNatTrans_id_app {X : Œì} {a : F.obj X} :
    (@ŒπNatTrans _ _ F _ _ (ùüô X)).app a =
    eqToHom (by simp) := Grothendieck.ŒπNatTrans_id_app

@[simp] theorem ŒπNatTrans_comp_app {X Y Z : Œì} {f : X ‚ü∂ Y} {g : Y ‚ü∂ Z} {a} :
    (@ŒπNatTrans _ _ F _ _ (f ‚â´ g)).app a =
    (@ŒπNatTrans _ _ F _ _ f).app a ‚â´
    (@ŒπNatTrans _ _ F _ _ g).app ((F.map f).obj a) ‚â´ eqToHom (by simp) := Grothendieck.ŒπNatTrans_comp_app

@[simp] theorem base_eqToHom {X Y : Groupoidal F} (h : X = Y) :
    (eqToHom h).base = eqToHom (congrArg base h) :=
  Grothendieck.base_eqToHom _

@[simp] theorem comp_base {X Y Z : Groupoidal F} (f : X ‚ü∂ Y)
    (g : Y ‚ü∂ Z) : (f ‚â´ g).base = f.base ‚â´ g.base :=
  rfl

section
variable {C : Type u} [Category.{v, u} C] {D : Type u‚ÇÅ}
  [Category.{v‚ÇÅ, u‚ÇÅ} D] (F : C ‚•§ Grpd) (G : D ‚•§ C)
  (X : Groupoidal (G ‚ãô F))

@[simp] theorem pre_obj_base : ((pre F G).obj X).base = G.obj X.base :=
  Grothendieck.pre_obj_base _ _ _

@[simp] theorem pre_obj_fiber : ((pre F G).obj X).fiber = X.fiber :=
  Grothendieck.pre_obj_fiber _ _ _

variable {X Y : Groupoidal (G ‚ãô F)} (f : X ‚ü∂ Y)

@[simp] theorem pre_map_base : ((pre F G).map f).base = G.map f.base :=
  Grothendieck.pre_map_base _ _ _

@[simp] theorem pre_map_fiber : ((pre F G).map f).fiber = f.fiber :=
  Grothendieck.pre_map_fiber _ _ _

end
section

variable {G : Œì ‚•§ Grpd}

-- theorem eta (p : Groupoidal F) : ‚ü®p.base, p.fiber‚ü© = p := rfl

theorem obj_ext_hEq {p1 p2 : Groupoidal F} (hbase : p1.base = p2.base)
    (hfib : HEq p1.fiber p2.fiber) : p1 = p2 :=
  Grothendieck.obj_ext_hEq hbase hfib


variable (Œ± : F ‚ü∂ G) (X : Groupoidal F)

@[simp] theorem map_obj_base : ((map Œ±).obj X).base = X.base :=
  Grothendieck.map_obj_base _ _

@[simp] theorem map_obj_fiber :
    ((map Œ±).obj X).fiber = (Œ±.app X.base).obj X.fiber :=
  Grothendieck.map_obj_fiber _ _

variable {X} {Y : Groupoidal F} (f : X ‚ü∂ Y)

@[simp] theorem map_map_base : ((Groupoidal.map Œ±).map f).base = f.base
    := Grothendieck.map_map_base _ _

@[simp] theorem map_map_fiber :
  ((Groupoidal.map Œ±).map f).fiber =
    eqToHom (Functor.congr_obj (map.proof_1 (whiskerRight Œ± _) f) X.fiber)
    ‚â´ (Œ±.app Y.base).map f.fiber := Grothendieck.map_map_fiber _ _

@[simp] theorem fiber_eqToHom (h : X = Y) :
    (eqToHom h).fiber = eqToHom (by subst h; simp) :=
  Grothendieck.fiber_eqToHom _

@[simp] theorem comp_fiber {Z : Groupoidal F}
    (g : Y ‚ü∂ Z) : Hom.fiber (f ‚â´ g) = eqToHom (by simp [Grpd.forgetToCat])
    ‚â´ (F.map g.base).map f.fiber ‚â´ g.fiber :=
  rfl
end
end


namespace IsMegaPullback

theorem comm_sq : Groupoidal.toPGrpd A ‚ãô PGrpd.forgetToGrpd
    = Grothendieck.forget _ ‚ãô A := rfl

variable {A} {C : Type u‚ÇÇ} [Category.{v‚ÇÇ} C]
  (fst : C ‚•§ PGrpd.{v‚ÇÅ, u‚ÇÅ})
  (snd : C ‚•§ Œì)
  (w : fst ‚ãô PGrpd.forgetToGrpd = snd ‚ãô A)

theorem toPGrpd_eq_lift :
    toPGrpd A =
    PGrpd.IsMegaPullback.lift
      (toPCat (Groupoid.compForgetToCat A))
      (Grothendieck.forget _ ‚ãô A) rfl :=
  PGrpd.IsMegaPullback.lift_uniq
    (toPCat (Groupoid.compForgetToCat A))
    (Grothendieck.forget _ ‚ãô A)
    rfl _ rfl rfl

def lift : C ‚•§ Groupoidal A :=
  Grothendieck.IsMegaPullback.lift
    (fst ‚ãô PGrpd.forgetToPCat) snd (by
      simp only [Groupoid.compForgetToCat, ‚Üê Functor.assoc, ‚Üê w]
      rfl)

theorem fac_left' : (lift fst snd w ‚ãô toPGrpd A) ‚ãô PGrpd.forgetToPCat
    = fst ‚ãô PGrpd.forgetToPCat := by
  rw [toPGrpd_eq_lift, Functor.assoc,
    PGrpd.IsMegaPullback.fac_left,
    ‚Üê PGrpd.IsMegaPullback.fac_left
      (fst ‚ãô PGrpd.forgetToPCat) (snd ‚ãô A) (by rw [‚Üê w]; rfl)]
  rfl

@[simp] theorem fac_left : lift fst snd w ‚ãô Groupoidal.toPGrpd _ = fst :=
   calc lift fst snd w ‚ãô Groupoidal.toPGrpd _
    _ = PGrpd.IsMegaPullback.lift
      (fst ‚ãô PGrpd.forgetToPCat)
      (snd ‚ãô A)
      (by rw [Functor.assoc, PGrpd.IsMegaPullback.comm_sq, ‚Üê w]; rfl) :=
    PGrpd.IsMegaPullback.lift_uniq
      (fst ‚ãô PGrpd.forgetToPCat)
      (snd ‚ãô A) _ _
      (fac_left' _ _ _)
      (by rw [Functor.assoc, comm_sq]; rfl)
    _ = fst :=
    symm $ PGrpd.IsMegaPullback.lift_uniq _ _ _ _ rfl w

@[simp] theorem fac_right :
    lift fst snd w ‚ãô Grothendieck.forget _
    = snd :=
  Grothendieck.IsMegaPullback.fac_right
    (fst ‚ãô PGrpd.forgetToPCat) snd (by
    rw [Functor.assoc, PGrpd.IsMegaPullback.comm_sq,
      ‚Üê Functor.assoc, w, Functor.assoc])

theorem lift_uniq (m : C ‚•§ Groupoidal A)
    (hl : m ‚ãô toPGrpd _ = fst)
    (hr : m ‚ãô Grothendieck.forget _ = snd) :
    m = lift _ _ w := by
  apply Grothendieck.IsMegaPullback.lift_uniq
  ¬∑ rw [‚Üê toPGrpd_comp_forgetToPCat, ‚Üê hl, Functor.assoc]
  ¬∑ exact hr

end IsMegaPullback

namespace IsPullback

open Grothendieck.IsPullback ULift

variable {Œì : Type u} [Category.{u} Œì] (A : Œì ‚•§ Grpd.{u,u})

abbrev uLiftGrpd : Cat.{u, max u (u+1)} :=
  Cat.ofULift.{max u (u+1)} Grpd.{u}

abbrev uLiftA : Cat.ofULift.{u+1} Œì ‚ü∂ uLiftGrpd.{u} :=
  downFunctor ‚ãô A ‚ãô upFunctor

abbrev uLiftPGrpd : Cat.{u, max u (u+1)} :=
  Cat.ofULift.{max u (u+1)} PGrpd.{u,u}

abbrev uLiftPGrpdForgetToGrpd : uLiftPGrpd.{u} ‚ü∂ uLiftGrpd.{u} :=
  downFunctor ‚ãô PGrpd.forgetToGrpd ‚ãô upFunctor

/--
The universal lift
`var' : Grothendieck(Groupoid.compForgetToCat A) ‚ü∂ Grothendieck(Grpd.forgetToCat)`
given by pullback pasting in the following pasting diagram.

  ‚ÜëGrothendieck (Groupoid.compForgetToCat A) .-.-.-.-> ‚ÜëGrothendieckForgetToCat -----> ‚ÜëPCat.{u,u}
        |                          |                                  |
        |                          |                                  |
‚Üë Grothendieck.forget        ‚ÜëGrothendieck.forget         ‚ÜëPCat.forgetToCat
        |                          |                                  |
        v                          v                                  v
        ‚ÜëŒì----------------------> ‚ÜëGrpd.{u,u} ----------------> ‚ÜëCat.{u,u}
-/
noncomputable def var' :
    IsPullback.uLiftGrothendieck (Groupoid.compForgetToCat.{u} A)
    ‚ü∂ IsPullback.uLiftGrothendieck Grpd.forgetToCat.{u,u} :=
  (Grothendieck.isPullback (Grpd.forgetToCat.{u,u})).lift
    (IsPullback.uLiftToPCat (Groupoid.compForgetToCat.{u} A))
    ((IsPullback.uLiftGrothendieckForget
      (Groupoid.compForgetToCat.{u} A)) ‚â´ uLiftA A)
      (Grothendieck.isPullback
        (Groupoid.compForgetToCat.{u} A)).cone.condition_one

theorem var'_uLiftToPCat :
    var' A ‚â´ (uLiftToPCat (Grpd.forgetToCat.{u,u}))
    = uLiftToPCat (Groupoid.compForgetToCat.{u} A) :=
  (Grothendieck.isPullback (Grpd.forgetToCat.{u,u})).lift_fst
    (IsPullback.uLiftToPCat (Groupoid.compForgetToCat.{u} A))
    ((IsPullback.uLiftGrothendieckForget (Groupoid.compForgetToCat.{u} A)) ‚â´ uLiftA A)
    (Grothendieck.isPullback (Groupoid.compForgetToCat.{u} A)).cone.condition_one

theorem var'_forget :
    var' A ‚â´ (uLiftGrothendieckForget (Grpd.forgetToCat.{u,u}))
    = uLiftGrothendieckForget (Groupoid.compForgetToCat.{u} A) ‚â´ uLiftA A :=
  (Grothendieck.isPullback (Grpd.forgetToCat.{u,u})).lift_snd
    (IsPullback.uLiftToPCat (Groupoid.compForgetToCat.{u} A)) ((IsPullback.uLiftGrothendieckForget (Groupoid.compForgetToCat.{u} A)) ‚â´ uLiftA A)
    (Grothendieck.isPullback (Groupoid.compForgetToCat.{u} A)).cone.condition_one


/--
The following square is a pullback
  ‚ÜëGrothendieck (Groupoid.compForgetToCat A) ------- var' -------> ‚ÜëGrothendieck Grpd.forgetToCat
        |                                                    |
        |                                                    |
‚Üë Grothendieck.forget                           ‚ÜëGrothendieck.forget
        |                                                    |
        v                                                    v
        ‚ÜëŒì--------------‚ÜëA----------------------------> ‚ÜëGrpd.{u,u}

by pullback pasting

  ‚ÜëGrothendieck (Groupoid.compForgetToCat A) --> ‚ÜëGrothendieck Grpd.forgetToCat ---> ‚ÜëPCat.{u,u}
        |                          |                                  |
        |                          |                                  |
‚Üë Grothendieck.forget        ‚ÜëGrothendieck.forget         ‚ÜëPCat.forgetToCat
        |                          |                                  |
        v                          v                                  v
        ‚ÜëŒì----------------------> ‚ÜëGrpd.{u,u} ----------------> ‚ÜëCat.{u,u}
-/
theorem
  isPullback_uLiftGrothendieckForget_Groupoid.compForgetToCat_uLiftGrothendieckForget_grpdForgetToCat :
    IsPullback
    (Cat.homOf (var' A))
    (IsPullback.uLiftGrothendieckForget (Groupoid.compForgetToCat.{u} A))
    (IsPullback.uLiftGrothendieckForget (Grpd.forgetToCat.{u,u}))
    (uLiftA A) :=
  IsPullback.of_right'
    (Grothendieck.isPullback (Groupoid.compForgetToCat.{u} A))
    (Grothendieck.isPullback (Grpd.forgetToCat.{u,u}))

theorem isPullback_aux:
    IsPullback
      (Cat.homOf (var' A)
        ‚â´ (Cat.ULift_iso_self ‚â™‚â´ PGrpd.isoGrothendieckForgetToCat.{u,u}.symm).hom)
      (IsPullback.uLiftGrothendieckForget (Groupoid.compForgetToCat.{u} A))
      (Cat.homOf PGrpd.forgetToGrpd.{u,u})
      (uLiftA A ‚â´ Cat.ULift_iso_self.hom) :=
  IsPullback.paste_horiz
    (isPullback_uLiftGrothendieckForget_Groupoid.compForgetToCat_uLiftGrothendieckForget_grpdForgetToCat.{u} A)
    (PGrpd.IsPullback.isPullback_uLiftGrothendieckForget_forgetToGrpd.{u})

open ULift

variable {Œì : Type u} [Category.{u} Œì] (A : Œì ‚•§ Grpd.{u,u})

theorem toPGrpd_comp_forgetToPCat_eq_var'_comp_isoGrothendieckForgetToCatInv_comp_forgetToPCat :
    downFunctor ‚ãô toPGrpd A ‚ãô PGrpd.forgetToPCat
      = var' A ‚ãô downFunctor ‚ãô PGrpd.isoGrothendieckForgetToCatInv ‚ãô PGrpd.forgetToPCat := by
  have h : var' A ‚ãô (IsPullback.uLiftToPCat (Grpd.forgetToCat.{u,u}))
    = IsPullback.uLiftToPCat (Groupoid.compForgetToCat.{u} A) := var'_uLiftToPCat A
  dsimp [IsPullback.uLiftToPCat] at h
  simp only [Cat.ofULift, Cat.of_Œ±, ‚Üê Functor.assoc,
    ‚Üê toPGrpd_comp_forgetToPCat, comp_upFunctor_inj] at h
  simp only [Functor.assoc] at h
  rw [‚Üê h]
  rfl

theorem toPGrpd_comp_forgetToGrpd_eq_var'_comp_isoGrothendieckForgetToCatInv_comp_forgetToGrpd :
    downFunctor ‚ãô toPGrpd A ‚ãô PGrpd.forgetToGrpd
      = var' A ‚ãô downFunctor ‚ãô PGrpd.isoGrothendieckForgetToCatInv ‚ãô PGrpd.forgetToGrpd := by
  have h : (downFunctor ‚ãô PGrpd.isoGrothendieckForgetToCatInv.{u,u})
      ‚ãô PGrpd.forgetToGrpd.{u,u} =
      IsPullback.uLiftGrothendieckForget Grpd.forgetToCat.{u,u} ‚ãô downFunctor :=
    PGrpd.IsPullback.isPullback_forgetToGrpd_uLiftGrothendieckForget_commSq.horiz_inv.{u,u}.w
  simp only [‚Üê toPGrpd_comp_forgetToPCat, Functor.assoc] at h
  have h1 : var' A ‚ãô IsPullback.uLiftGrothendieckForget Grpd.forgetToCat.{u}
      = IsPullback.uLiftGrothendieckForget (Groupoid.compForgetToCat A) ‚ãô uLiftA A :=
    var'_forget A
  simp only [Cat.of_Œ±, IsPullback.uLiftGrothendieckForget, ‚Üê Functor.assoc,
    uLiftA] at h1
  rw [comp_upFunctor_inj] at h1
  simp only [h, ‚Üê Functor.assoc, h1]
  rfl

theorem toPGrpd_eq_var'_comp_isoGrothendieckForgetToCatInv' :
    Cat.homOf (downFunctor ‚ãô toPGrpd A)
      = Cat.homOf (var' A ‚ãô downFunctor ‚ãô PGrpd.isoGrothendieckForgetToCatInv)
      :=
  PGrpd.isPullback_forgetToGrpd_forgetToCat.{u}.hom_ext
    (toPGrpd_comp_forgetToPCat_eq_var'_comp_isoGrothendieckForgetToCatInv_comp_forgetToPCat _)
    (toPGrpd_comp_forgetToGrpd_eq_var'_comp_isoGrothendieckForgetToCatInv_comp_forgetToGrpd _)

theorem toPGrpd_eq_var'_comp_isoGrothendieckForgetToCatInv :
    downFunctor ‚ãô toPGrpd A
      = var' A ‚ãô downFunctor ‚ãô PGrpd.isoGrothendieckForgetToCatInv :=
  toPGrpd_eq_var'_comp_isoGrothendieckForgetToCatInv' _

end IsPullback

open Grothendieck
open IsPullback

/-
The following square is a pullback

‚ÜëGrothendieck (Groupoid.compForgetToCat A) -- toPGrpd --> PGrpd
        |                                                     |
        |                                                     |
‚Üë Grothendieck.forget                                PGrpd.forgetToGrpd
        |                                                     |
        |                                                     |
        v                                                     v
        ‚ÜëŒì-----------------------A-----------------------> Grpd
in the appropriately sized category `Grpd.{v, max u (v+1)}`;
where `(Œì : Type u) [Grpdegory.{v} Œì] (A : Œì ‚•§ Grpd.{v,v})`.
-/
theorem isPullback {Œì : Type u} [Category.{u} Œì] (A : Œì ‚•§ Grpd.{u,u}) :
    IsPullback
      (Cat.homOf (ULift.downFunctor ‚ãô toPGrpd A))
      (IsPullback.uLiftGrothendieckForget (Groupoid.compForgetToCat.{u} A))
      (Cat.homOf PGrpd.forgetToGrpd.{u,u})
      (Cat.homOf (ULift.downFunctor.{u,u} ‚ãô A)) := by
  have h := isPullback_aux.{u} A
  simp at h
  convert h
  apply toPGrpd_eq_var'_comp_isoGrothendieckForgetToCatInv

section

variable {Œì : Type u‚ÇÇ} [Category.{v‚ÇÇ} Œì] {Œî : Type u‚ÇÉ} [Category.{v‚ÇÉ} Œî]
    (œÉ : Œî ‚•§ Œì)

@[simp] theorem ŒπCompPre (A : Œì ‚•§ Grpd.{v‚ÇÅ,u‚ÇÅ}) (x : Œî)
    : Œπ (œÉ ‚ãô A) x ‚ãô Groupoidal.pre A œÉ = Œπ A (œÉ.obj x) :=
  Grothendieck.ŒπCompPre _ (A ‚ãô Grpd.forgetToCat) _

end

section

variable {Œì : Type u} [Category.{v} Œì] {A : Œì ‚•§ Grpd.{v‚ÇÅ,u‚ÇÅ}}
    {Œ± : Œì ‚•§ PGrpd.{v‚ÇÅ,u‚ÇÅ}} (h : Œ± ‚ãô PGrpd.forgetToGrpd = A)

def sec' :
    Œì ‚•§ Groupoidal A :=
  Groupoidal.IsMegaPullback.lift Œ± (Functor.id _)
    (by simp [h, Functor.id_comp])

@[simp] def sec'_toPGrpd : Groupoidal.sec' h ‚ãô Groupoidal.toPGrpd _ = Œ± := by
  simp [Groupoidal.sec']

@[simp] def sec'_forget : Groupoidal.sec' h ‚ãô Grothendieck.forget _
    = Functor.id _ :=
  rfl

end

variable {Œì : Type u} [Category.{v} Œì]
/-- `sec` is the universal lift in the following diagram,
  which is a section of `Groupoidal.forget`
             Œ±
  ===== Œì -------Œ±--------------¬¨
 ‚Äñ      ‚Üì sec                   V
 ‚Äñ   M.ext A ‚ãØ -------------> PGrpd
 ‚Äñ      |                        |
 ‚Äñ      |                        |
 ‚Äñ   forget                  forgetToGrpd
 ‚Äñ      |                        |
 ‚Äñ      V                        V
  ===== Œì --Œ± ‚â´ forgetToGrpd--> Grpd
-/
def sec (Œ± : Œì ‚•§ PGrpd.{v‚ÇÅ,u‚ÇÅ}) :
    Œì ‚•§ Groupoidal (Œ± ‚ãô PGrpd.forgetToGrpd) :=
  sec' rfl

@[simp] def sec_toPGrpd (Œ± : Œì ‚•§ PGrpd.{v‚ÇÅ,u‚ÇÅ}) :
    Groupoidal.sec Œ± ‚ãô Groupoidal.toPGrpd _ = Œ± := sec'_toPGrpd _

@[simp] def sec_forget (Œ± : Œì ‚•§ PGrpd.{v‚ÇÅ,u‚ÇÅ}) :
    Groupoidal.sec Œ± ‚ãô Grothendieck.forget _ = Functor.id _ := rfl

end Groupoidal
end Grothendieck
end CategoryTheory
