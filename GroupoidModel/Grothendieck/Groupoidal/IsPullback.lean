import GroupoidModel.Pointed.IsPullback
import GroupoidModel.Grothendieck.Groupoidal.Basic

import SEq.Tactic.DepRewrite

/-!
# The Grothendieck construction as a pullback of categories

The following square is a (meta-theoretic) pullback

       ‚à´(A) ------- toPGrpd ---------> PGrpd
        |                                 |
        |                                 |
     forget                     PGrpd.forgetToGrpd
        |                                 |
        v                                 v
        Œì--------------A---------------> Grpd
-/

universe v u v‚ÇÅ u‚ÇÅ v‚ÇÇ u‚ÇÇ v‚ÇÉ u‚ÇÉ

namespace CategoryTheory

namespace Grothendieck

namespace Groupoidal

section

variable {Œì : Type u} [Category.{v} Œì] (A : Œì ‚•§ Grpd.{v‚ÇÅ,u‚ÇÅ})

/--
`toPGrpd` is the lift induced by the pullback property of `PGrpd`
       ‚à´(A) ------- toPGrpd ---------> PGrpd --------> PCat
        |                                 |              |
        |                                 |              |
     forget                     PGrpd.forgetToGrpd      PCat.forgetToCat
        |                                 |              |
        |                                 |              |
        v                                 v              v
        Œì--------------A---------------> Grpd --------> Cat
-/
def toPGrpd : ‚à´(A) ‚•§ PGrpd.{v‚ÇÅ,u‚ÇÅ} :=
  PGrpd.isPullback.lift (Grothendieck.toPCat (A ‚ãô Grpd.forgetToCat)) (forget ‚ãô A) (by
    rw [toPCat_forgetToCat]
    rfl)

theorem toPGrpd_forgetToGrpd : toPGrpd A ‚ãô PGrpd.forgetToGrpd = forget ‚ãô A :=
  PGrpd.isPullback.fac_right _ _ _

theorem toPGrpd_forgetToPCat : toPGrpd A ‚ãô PGrpd.forgetToPCat = (Grothendieck.toPCat _) :=
  PGrpd.isPullback.fac_left _ _ _

/--
The left square is a pullback since the right square and outer square are.
       ‚à´(A) ------- toPGrpd ---------> PGrpd --------> PCat
        |                                 |              |
        |                                 |              |
     forget                     PGrpd.forgetToGrpd      PCat.forgetToCat
        |                                 |              |
        |                                 |              |
        v                                 v              v
        Œì--------------A---------------> Grpd --------> Cat
-/
def isPullback : Functor.IsPullback (toPGrpd A) forget PGrpd.forgetToGrpd A :=
  Functor.IsPullback.Paste.ofRight'
    (Grothendieck.toPCat_forgetToCat _)
    (Grothendieck.isPullback _)
    PGrpd.forgetToPCat_forgetToCat
    PGrpd.isPullback

/--
We also provide an elementary definition of `toPGrpd` which we can
use for computation.
We avoid using this version and doing direct computations if possible.
-/
def toPGrpd' : ‚à´(A) ‚•§ PGrpd.{v‚ÇÅ,u‚ÇÅ} :=
  PGrpd.functorTo (forget ‚ãô A) (fun x => x.fiber) (fun f => f.fiber)
    (by simp) (by simp [Grpd.forgetToCat, forget])

@[simp] theorem toPGrpd'_obj_base (x) :
    ((toPGrpd A).obj x).base = A.obj x.base := by
  rfl

@[simp] theorem toPGrpd'_obj_fiber (x) :
    ((toPGrpd' A).obj x).fiber = x.fiber := by
  rfl

@[simp] theorem toPGrpd'_map_base {x y} (f : x ‚ü∂ y) :
    ((toPGrpd' A).map f).base = A.map f.base := by
  rfl

@[simp] theorem toPGrpd'_map_fiber {x y} (f : x ‚ü∂ y) :
    ((toPGrpd' A).map f).fiber = f.fiber := by
  rfl

theorem toPGrpd_eq_toPGrpd' : toPGrpd A = toPGrpd' A := by
  symm
  apply PGrpd.isPullback.lift_uniq
  ¬∑ rfl
  ¬∑ rfl

theorem toPGrpd_obj_base (x) : ((toPGrpd A).obj x).base = A.obj x.base :=
  rfl

theorem toPGrpd_obj_fiber (x) : HEq ((toPGrpd A).obj x).fiber x.fiber := by
  rw [toPGrpd_eq_toPGrpd']
  rfl

theorem toPGrpd_map_base {x y} (f : x ‚ü∂ y) :
    ((toPGrpd A).map f).base = A.map f.base := by
  rfl

theorem toPGrpd_map_fiber {x y} (f : x ‚ü∂ y) :
    HEq ((toPGrpd A).map f).fiber f.fiber := by
  rw [toPGrpd_eq_toPGrpd']
  rfl
end

section

variable {Œì : Type u} [Category.{v} Œì]
variable (A : Œì ‚•§ Grpd.{v‚ÇÅ,u‚ÇÅ}) (Œ± : Œì ‚•§ PGrpd.{v‚ÇÅ,u‚ÇÅ}) (h : Œ± ‚ãô PGrpd.forgetToGrpd = A)

/-- `sec` is the universal lift in the following diagram,
  which is a section of `Groupoidal.forget`
             Œ±
  ===== Œì -------Œ±--------------¬¨
 ‚Äñ      ‚Üì sec                   V
 ‚Äñ     ‚à´(A) ----------------> PGrpd
 ‚Äñ      |                        |
 ‚Äñ      |                        |
 ‚Äñ   forget                  forgetToGrpd
 ‚Äñ      |                        |
 ‚Äñ      V                        V
  ===== Œì --Œ± ‚â´ forgetToGrpd--> Grpd
-/
def sec : Œì ‚•§ ‚à´(A) :=
  Groupoidal.functorTo (ùü≠ _) (fun x => PGrpd.objFiber' h x) (fun f => PGrpd.mapFiber' h f)
  (fun x => by simp) (fun f g => by subst h; simp [PGrpd.mapFiber'])

@[simp] lemma sec_obj_base (x) : ((sec A Œ± h).obj x).base = x :=
  rfl

@[simp] lemma sec_obj_fiber (x) :
    ((sec A Œ± h).obj x).fiber = PGrpd.objFiber' h x :=
  rfl

@[simp] lemma sec_map_base {x y} {f : x ‚ü∂ y} : ((sec A Œ± h).map f).base = f :=
  rfl

@[simp] lemma sec_map_fiber {x y} {f : x ‚ü∂ y} :
    ((sec A Œ± h).map f).fiber = PGrpd.mapFiber' h f :=
  rfl

@[simp] def sec_toPGrpd : sec A Œ± h ‚ãô toPGrpd _ = Œ± := by
  apply Grothendieck.Functor.hext
  ¬∑ rw [Functor.assoc, toPGrpd_forgetToGrpd, sec, ‚Üê Functor.assoc, h]
    rfl
  ¬∑ intro x
    apply (toPGrpd_obj_fiber _ _).trans
    simp
  ¬∑ intro x y f
    apply (toPGrpd_map_fiber _ _).trans
    exact PGrpd.mapFiber'_heq _ _

@[simp] def sec_forget : sec A Œ± h ‚ãô forget = ùü≠ _ :=
  rfl

theorem sec_eq_lift : sec A Œ± h = (isPullback A).lift Œ± (ùü≠ _) (by simp [h, Functor.id_comp]) := by
  apply (Grothendieck.Groupoidal.isPullback _).lift_uniq
  ¬∑ simp
  ¬∑ simp

section naturality
variable {Œî : Type u‚ÇÉ} [Category.{v‚ÇÉ} Œî] (œÉ : Œî ‚•§ Œì)

@[simp]
theorem pre_toPGrpd (A : Œì ‚•§ Grpd) : pre A œÉ ‚ãô toPGrpd _ = toPGrpd _ := by
  rfl

theorem sec_naturality : œÉ ‚ãô sec A Œ± h = sec (œÉ ‚ãô A) (œÉ ‚ãô Œ±) (by rw [‚Üê h]; rfl) ‚ãô pre A œÉ := by
  apply (isPullback A).hom_ext
  . simp [Functor.assoc, Functor.comp_id]
  . conv_rhs => rw [Functor.assoc, pre_forget, ‚Üê Functor.assoc, sec_forget]
    simp [Functor.assoc, Functor.comp_id, Functor.id_comp]

end naturality

end

section Œπ

variable {C : Type u} [Category.{v} C] (F : C ‚•§ Grpd.{v‚ÇÅ,u‚ÇÅ})

theorem Œπ_eq_lift (c : C) : Œπ F c =
    (Grothendieck.Groupoidal.isPullback F).lift
    (Œπ F c ‚ãô toPGrpd F)
    (Œπ F c ‚ãô forget) rfl := by
  apply (Grothendieck.Groupoidal.isPullback F).lift_uniq
  ¬∑ simp
  ¬∑ simp

end Œπ


end Groupoidal
end Grothendieck
end CategoryTheory
