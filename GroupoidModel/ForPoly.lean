import Poly.UvPoly.Basic
import GroupoidModel.ForMathlib

open CategoryTheory Limits

noncomputable section

namespace CategoryTheory.UvPoly

variable {ùíû} [Category ùíû] [HasTerminal ùíû] [HasPullbacks ùíû]

variable {E B : ùíû} (P : UvPoly E B) (A : ùíû)

def compDomEquiv {Œì E B D A : ùíû} {P : UvPoly E B} {Q : UvPoly D A} :
    (Œì ‚ü∂ compDom P Q) ‚âÉ
      (AB : Œì ‚ü∂ P.functor.obj A) √ó (Œ± : Œì ‚ü∂ E) √ó (Œ≤ : Œì ‚ü∂ D) √ó'
      (w : AB ‚â´ P.fstProj A = Œ± ‚â´ P.p) √ó'
      (Œ≤ ‚â´ Q.p = pullback.lift AB Œ± w ‚â´ (PartialProduct.fan P A).snd) :=
  calc
  _ ‚âÉ (Œ≤ : Œì ‚ü∂ D) √ó (Œ±B : Œì ‚ü∂ pullback (PartialProduct.fan P A).fst P.p) √ó'
      Œ≤ ‚â´ Q.p = Œ±B ‚â´ (PartialProduct.fan P A).snd :=
    pullbackHomEquiv
  _ ‚âÉ (Œ≤ : Œì ‚ü∂ D) √ó (Œ±B : (AB : Œì ‚ü∂ P.functor.obj A) √ó (Œ± : Œì ‚ü∂ E) √ó'
        AB ‚â´ P.fstProj A = Œ± ‚â´ P.p) √ó'
      Œ≤ ‚â´ Q.p = pullback.lift Œ±B.1 Œ±B.2.1 Œ±B.2.2 ‚â´ (PartialProduct.fan P A).snd :=
    Equiv.sigmaCongrRight (fun Œ≤ => calc
      _ ‚âÉ (Œ±B : (AB : Œì ‚ü∂ P.functor.obj A) √ó (Œ± : Œì ‚ü∂ E) √ó' (AB ‚â´ P.fstProj A = Œ± ‚â´ P.p)) √ó'
          (Œ≤ ‚â´ Q.p = pullback.lift Œ±B.1 Œ±B.2.1 Œ±B.2.2 ‚â´ (PartialProduct.fan P A).snd) :=
        Equiv.psigmaCongrProp pullbackHomEquiv (fun Œ±B => by
          apply Eq.congr_right
          congr 1
          apply pullback.hom_ext
          ¬∑ simp [pullbackHomEquiv]
          ¬∑ simp [pullbackHomEquiv]))
  _ ‚âÉ _ := {
      -- TODO should be general tactic for this?
      toFun x := ‚ü® x.2.1.1, x.2.1.2.1 , x.1 , x.2.1.2.2, x.2.2 ‚ü©
      invFun x := ‚ü® x.2.2.1 , ‚ü® x.1, x.2.1 , x.2.2.2.1 ‚ü© , x.2.2.2.2 ‚ü©
      left_inv _ := rfl
      right_inv _ := rfl }

@[simp] theorem compDomEquiv_symm_comp_p {Œì E B D A : ùíû} {P : UvPoly E B}
    {Q : UvPoly D A} (AB : Œì ‚ü∂ P.functor.obj A) (Œ± : Œì ‚ü∂ E)
    (Œ≤ : Œì ‚ü∂ D) (w : AB ‚â´ P.fstProj A = Œ± ‚â´ P.p)
    (h : Œ≤ ‚â´ Q.p = pullback.lift AB Œ± w ‚â´ (PartialProduct.fan P A).snd) :
    compDomEquiv.symm ‚ü®AB,Œ±,Œ≤,w,h‚ü© ‚â´ (P.comp Q).p = AB := by
   simp [compDomEquiv, Equiv.psigmaCongrProp, Equiv.sigmaCongrRight_symm,
    Equiv.coe_fn_symm_mk, pullbackHomEquiv]


universe v‚ÇÅ u‚ÇÅ

variable {C : Type u‚ÇÅ} [Category.{v‚ÇÅ} C] [HasPullbacks C] [HasTerminal C] {E B : C}

instance preservesConnectedLimitsOfShape_of_hasLimitsOfShape {J : Type v‚ÇÅ} [SmallCategory J]
  [IsConnected J] [HasLimitsOfShape J C] (P : UvPoly E B) :
    PreservesLimitsOfShape J (P.functor) := by
  unfold UvPoly.functor
  infer_instance

instance preservesPullbacks (P : UvPoly E B)
    {Pb X Y Z : C} (fst : Pb ‚ü∂ X) (snd : Pb ‚ü∂ Y)
    (f : X ‚ü∂ Z) (g : Y ‚ü∂ Z)
    (h: IsPullback fst snd f g) :
    IsPullback (P.functor.map fst) (P.functor.map snd) (P.functor.map f) (P.functor.map g) :=
    P.functor.map_isPullback h


end CategoryTheory.UvPoly
